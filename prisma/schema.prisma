// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums are not supported in SQLite, using String with constraints instead

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         String   @default("CUSTOMER") // ADMIN | CUSTOMER
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  addresses    Address[]
  reviews      Review[]
  orders       Order[]
  cartItems    CartItem[]

  @@map("users")
}

model Address {
  id        String      @id @default(cuid())
  userId    String
  type      String // SHIPPING | BILLING
  fullName  String
  phone     String
  line1     String
  line2     String?
  city      String
  state     String
  pincode   String
  country   String      @default("India")
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  slug          String   @unique
  title         String
  description   String
  categoryId    String
  images        String   // Comma-separated image URLs
  nutritionJson String?  // JSON string for nutrition facts
  features      String   // Comma-separated feature strings
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variants   Variant[]
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("products")
}

model Variant {
  id              String  @id @default(cuid())
  productId       String
  sku             String  @unique
  size            String
  flavor          String?
  priceInINR      Int     // Price in paise (multiply by 100)
  compareAtInINR  Int?    // Compare at price in paise
  stock           Int     @default(0)
  isActive        Boolean @default(true)

  // Relations
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("variants")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  title     String?
  content   String?
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId]) // One review per user per product
  @@map("reviews")
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  number            String        @unique
  status            String        @default("PENDING") // PENDING | CONFIRMED | PROCESSING | SHIPPED | DELIVERED | CANCELLED
  subtotalInINR     Int           // Subtotal in paise
  shippingInINR     Int           // Shipping cost in paise
  totalInINR        Int           // Total in paise
  paymentStatus     String        @default("PENDING") // PENDING | PAID | FAILED
  trackingNumber    String?
  shippingAddressId String
  billingAddressId  String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingAddress Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  variantId String
  qty       Int
  priceInINR Int   // Price at time of order in paise

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  variant Variant @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  variantId String
  qty       Int
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId]) // One cart item per user per product variant
  @@map("cart_items")
}
